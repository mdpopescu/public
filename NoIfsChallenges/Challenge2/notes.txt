Rx - marble diagram

S/S Clicked        -------X---------------------X------------------------------------------------------------------------------------
RESET Clicked      ---------------------------------X--------------------------------------------------------------------------------
HOLD Clicked       --------------X--------X------------------------------------------------------------------------------------------

S/S Enabled        T----------------------------F---T--------------------------------------------------------------------------------
RESET Enabled      F----------------------------T---F--------------------------------------------------------------------------------
HOLD Enabled       F------T---------------------F------------------------------------------------------------------------------------

Timer value        0------0---1---2---3---4---5-----0--------------------------------------------------------------------------------
Displayed value    0------0---1-----------4---5-----0--------------------------------------------------------------------------------



The HOLD state should reset when RESET is clicked

S/S Clicked        -------X---------------------X------------X---------X-------------------------------------------------------------
RESET Clicked      ---------------------------------X--------------------------------------------------------------------------------
HOLD Clicked       --------------X---------------------------------------------------------------------------------------------------

S/S Enabled        T----------------------------F---T------------------F-------------------------------------------------------------
RESET Enabled      F----------------------------T---F------------------T-------------------------------------------------------------
HOLD Enabled       F------T---------------------F------------T---------F-------------------------------------------------------------

Timer value        0------0---1---2---3---4---5-----0--------0---1---2---------------------------------------------------------------
Displayed value    0------0---1---------------------0--------0---1---2---------------------------------------------------------------



Another attempt

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            // external events

            var startStopClicked = btnStartStop.GetClicks().CreateLog("startStopClicked").Share();
            var resetClicked = btnReset.GetClicks().CreateLog("resetClicked").Share();
            var holdClicked = btnHold.GetClicks().CreateLog("holdClicked").Share();
            IObservable<TimeSpan> CreateTimer() => Observable.Interval(SECOND).StartWith(-1).Select(value => TimeSpan.FromSeconds(value + 1)).CreateLog("timerValue").Share();

            // derived events

            var startClicked = startStopClicked.Toggle(false).Where(it => it).AsUnit().CreateLog("startClicked");
            var stopClicked = startStopClicked.Buffer(2).AsUnit().CreateLog("stopClicked");

            var ssEnabledFalse = stopClicked.AsConst(false).CreateLog("ssEnabledFalse");
            var ssEnabledTrue = resetClicked.AsConst(true).CreateLog("ssEnabledTrue");
            var ssEnabled = ssEnabledFalse.Merge(ssEnabledTrue).StartWith(true).CreateLog("ssEnabled");

            var resetEnabledTrue = stopClicked.AsConst(true).CreateLog("resetEnabledTrue");
            var resetEnabledFalse = resetClicked.AsConst(false).CreateLog("resetEnabledFalse");
            var resetEnabled = resetEnabledTrue.Merge(resetEnabledFalse).StartWith(false).CreateLog("resetEnabled");

            var holdEnabled = startClicked.AsConst(true).CreateLog("holdEnabled");

            var unfreeze = holdClicked.Buffer(2).AsUnit().CreateLog("unfreeze");
            var displayEnabled = startClicked.Merge(unfreeze).CreateLog("displayEnabled");

            var clearHold = resetClicked.AsUnit().StartWith(Unit.Default).CreateLog("clearHold");
            var shouldDisplay = clearHold.SwitchMap(_ => holdClicked.Toggle(true)).Share().CreateLog("shouldDisplay");

            var timer = startClicked.SwitchMap(_ => CreateTimer().TakeUntil(stopClicked).CreateLog("CreateTimer")).CreateLog("timer");
            var display = timer.Select(it => it.ToString()).CreateLog("display");

            //base.OnLoad(e);

            //var startStopClicked = btnStartStop.GetClicks().CreateLog("startStopClicked").Share();
            //var resetClicked = btnReset.GetClicks().CreateLog("resetClicked").Share();
            //var holdClicked = btnHold.GetClicks().CreateLog("holdClicked").Share();

            //var stopClicked = startStopClicked.Buffer(2).AsUnit().CreateLog("stopClicked");

            //var ssEnabledFalse = stopClicked.AsConst(false).CreateLog("ssEnabledFalse");
            //var ssEnabledTrue = resetClicked.AsConst(true).CreateLog("ssEnabledTrue");
            //var ssEnabled = ssEnabledFalse.Merge(ssEnabledTrue).StartWith(true).CreateLog("ssEnabled");

            //var resetEnabledTrue = stopClicked.AsConst(true).CreateLog("resetEnabledTrue");
            //var resetEnabledFalse = resetClicked.AsConst(false).CreateLog("resetEnabledFalse");
            //var resetEnabled = resetEnabledTrue.Merge(resetEnabledFalse).StartWith(false).CreateLog("resetEnabled");

            //var holdEnabled = startStopClicked.Toggle(false).CreateLog("holdEnabled");

            //var clearHold = resetClicked.AsUnit().StartWith(Unit.Default).CreateLog("clearHold");
            //var shouldDisplay = clearHold.SwitchMap(_ => holdClicked.Toggle(true)).Share().CreateLog("shouldDisplay");

            //var timer = startStopClicked.Toggle(false).WhenTrue(() => StartTimer().CreateLog("startTimer").Share()).CreateLog("timer");

            var timerRunning = timer.CombineLatest(shouldDisplay).Where(it => it.Item2).Select(it => it.Item1).CreateLog("timerRunning");
            var timerReset = resetClicked.Select(_ => TimeSpan.Zero).CreateLog("timerReset");
            var displayActive = timerRunning.Merge(timerReset).Select(value => value.ToString()).CreateLog("displayActive");

            var s1 = btnStartStop.HandleChanges(ssEnabled, InternalSetEnabled);
            var s2 = btnReset.HandleChanges(resetEnabled, InternalSetEnabled);
            var s3 = btnHold.HandleChanges(holdEnabled, InternalSetEnabled);

            var s4 = lblClock.HandleChanges(displayActive, InternalSetText);

            subscription = new CompositeDisposable(s1, s2, s3, s4);
        }
